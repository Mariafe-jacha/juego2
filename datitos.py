# -*- coding: utf-8 -*-
"""datitos.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zXg68qPzVb79meGlEJENcnAZwBlw-CsY
"""

# Requiere: streamlit, pandas, gspread, oauth2client

import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- CONFIGURACIÃ“N GOOGLE SHEETS ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credenciales.json", scope)
client = gspread.authorize(credentials)

# ID real de tu Google Sheet
SHEET_ID = "14FreYhyr8OQ7O6PKft2nhQRYhBI8gt-RX-dFV64Q_Og"
sheet = client.open_by_key(SHEET_ID).worksheet("Base")

# --- FUNCIONES PARA CARGAR Y GUARDAR DATOS ---
def cargar_datos():
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def guardar_datos(df):
    sheet.clear()
    sheet.update([df.columns.values.tolist()] + df.values.tolist())

# --- FORMULARIO DE USUARIO ---
st.title("ðŸ’˜ Juego de Match de Parejas")
st.write("Completa tus datos para buscar a tu alma gemela")

nombre = st.text_input("Nombre")
edad = st.number_input("Edad", min_value=18, max_value=100)
genero = st.selectbox("GÃ©nero", ["Femenino", "Masculino", "No binario"])
universidad = st.text_input("Universidad")
cumpleaÃ±os = st.date_input("CumpleaÃ±os")
signo = st.selectbox("Signo zodiacal", ["Aries", "Tauro", "GÃ©minis", "CÃ¡ncer", "Leo", "Virgo",
                                        "Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis"])
altura = st.number_input("Altura (cm)", min_value=100, max_value=250)
hobbies = st.multiselect("Hobbies", ["Leer", "Bailar", "Cocinar", "Viajar", "Ver pelÃ­culas", "Deporte", "Arte", "MÃºsica"])
quiere_hijos = st.radio("Â¿Quieres tener hijos?", ["SÃ­", "No"])
interes = st.selectbox("Â¿QuÃ© gÃ©nero te interesa?", ["Hombre", "Mujer", "Ambos"])
rango_edad = st.selectbox("Rango de edad preferido", ["Misma edad", "Hasta 5 aÃ±os mÃ¡s", "Hasta 5 aÃ±os menos"])
rango_altura = st.multiselect("Altura preferida", ["Misma talla", "MÃ¡s alta", "MÃ¡s baja"])

if st.button("Buscar pareja ðŸ’Œ"):
    if nombre and hobbies:
        nuevo_usuario = {
            "nombre": nombre,
            "edad": edad,
            "genero": genero,
            "universidad": universidad,
            "cumpleaÃ±os": str(cumpleaÃ±os),
            "signo": signo,
            "altura": altura,
            "hobbies": ','.join(hobbies),
            "quiere_hijos": quiere_hijos,
            "interes": interes,
            "rango_edad": rango_edad,
            "rango_altura": ','.join(rango_altura),
            "ya_tiene_match": "no"
        }

        df = cargar_datos()
        df = pd.concat([df, pd.DataFrame([nuevo_usuario])], ignore_index=True)

        # --- BÃšSQUEDA DE MATCH ---
        posibles = df[df["ya_tiene_match"] == "no"].copy()
        posibles = posibles[posibles["nombre"] != nombre]

        def es_compatible(fila):
            if genero not in fila["interes"] and fila["genero"] not in interes:
                return False

            signos_compatibles = {
                "Aries": ["Leo", "Sagitario", "GÃ©minis"],
                "Tauro": ["Virgo", "Capricornio", "CÃ¡ncer"],
                "GÃ©minis": ["Acuario", "Libra", "Aries"],
                "CÃ¡ncer": ["Piscis", "Escorpio", "Tauro"],
                "Leo": ["Aries", "Sagitario", "Libra"],
                "Virgo": ["Tauro", "Capricornio", "Escorpio"],
                "Libra": ["GÃ©minis", "Leo", "Acuario"],
                "Escorpio": ["CÃ¡ncer", "Piscis", "Virgo"],
                "Sagitario": ["Leo", "Aries", "Acuario"],
                "Capricornio": ["Tauro", "Virgo", "Piscis"],
                "Acuario": ["GÃ©minis", "Libra", "Sagitario"],
                "Piscis": ["Escorpio", "CÃ¡ncer", "Capricornio"]
            }
            if signo not in signos_compatibles.get(fila["signo"], []):
                return False

            if quiere_hijos != fila["quiere_hijos"]:
                return False

            h1 = set(hobbies)
            h2 = set(fila["hobbies"].split(','))
            if len(h1.intersection(h2)) == 0:
                return False

            edad_otro = int(fila["edad"])
            if rango_edad == "Misma edad" and abs(edad - edad_otro) > 1:
                return False
            elif rango_edad == "Hasta 5 aÃ±os mÃ¡s" and edad_otro - edad > 5:
                return False
            elif rango_edad == "Hasta 5 aÃ±os menos" and edad - edad_otro > 5:
                return False

            altura_otro = int(fila["altura"])
            if "Misma talla" in rango_altura and abs(altura - altura_otro) <= 3:
                return True
            if "MÃ¡s alta" in rango_altura and altura_otro > altura:
                return True
            if "MÃ¡s baja" in rango_altura and altura_otro < altura:
                return True
            return False

        match = posibles[posibles.apply(es_compatible, axis=1)]

        if not match.empty:
            persona = match.iloc[0]
            st.success(f"Â¡Felicidades {nombre}! Has hecho match con **{persona['nombre']}** ðŸŽ‰ðŸ’–")
            df.loc[df["nombre"] == nombre, "ya_tiene_match"] = "sÃ­"
            df.loc[df["nombre"] == persona["nombre"], "ya_tiene_match"] = "sÃ­"
        else:
            st.info(f"No encontramos una pareja ideal por ahora, {nombre}. ðŸŒ¸âœ¨ Pero no pierdas la esperanza, Â¡tu match perfecto puede estar a punto de aparecer!")

        guardar_datos(df)
    else:
        st.warning("Por favor, completa todos los campos obligatorios.")